using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _02_Knight_Game
{
    class KnightGame
    {
        private static int result = 0;

        private static char[][] chessBoard;

        static void Main()
        {
            int size = int.Parse(Console.ReadLine());
            chessBoard = GetChessBoard(size);

            for (int i = 8; i >= 1; i--)
            {
                for (int row = 0; row < size; row++)
                {
                    for (int col = 0; col < size; col++)
                    {
                        if (chessBoard[row][col] == 'K')
                        {
                            CheckCurrentKnight(row, col, size, i);
                        }
                    }
                }
            }
            Console.WriteLine(result);
        }

        private static void CheckCurrentKnight(int row, int col, int size, int currentRound)
        {
            int removed = 0;
            if (row-2>=0 && col-1>=0)
            {
                if (chessBoard[row-2][col-1]=='K')
                {
                    removed++;
                }
            }
            if (row - 2 >= 0 && col + 1 < size)
            {
                if (chessBoard[row-2][col+1] == 'K')
                {
                    removed++;
                }
            }
            if (row - 1 >= 0 && col + 2 < size)
            {
                if (chessBoard[row - 1][col + 2] == 'K')
                {
                    removed++;
                }
            }
            if (row - 1 >= 0 && col -2 >= 0)
            {
                if (chessBoard[row - 1][col - 2] == 'K')
                {
                    removed++;
                }
            }
            if (row +1 < size && col + 2 < size)
            {
                if (chessBoard[row + 1][col + 2] == 'K')
                {
                    removed++;
                }
            }
            if (row + 1 < size && col - 2 >= 0)
            {
                if (chessBoard[row + 1][col - 2] == 'K')
                {
                    removed++;
                }
            }
            if (row + 2 < size && col + 1 < size)
            {
                if (chessBoard[row + 2][col + 1] == 'K')
                {
                    removed++;
                }
            }
            if (row + 2 < size && col - 1 >= 0)
            {
                if (chessBoard[row + 2][col - 1] == 'K')
                {
                    removed++;
                }
            }
            if (currentRound == removed)
            {
                result++;
                chessBoard[row][col] = '0';
            }
        }


        private static char[][] GetChessBoard(int numberOfRows)
        {
            char[][] matrix = new char[numberOfRows][];

            for (int row = 0; row < numberOfRows; row++)
            {
                matrix[row] = Console.ReadLine()
                    .ToCharArray();
            }

            return matrix;
        }
    }
}
